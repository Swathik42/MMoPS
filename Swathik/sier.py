# -*- coding: utf-8 -*-
"""SIER.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13K9euvNLSKRxj8PZJSZ1cnjwj0_obhjx
"""



import math
import numpy as np 
import matplotlib.pyplot as plt
from scipy.interpolate import Rbf

def s_i_r_model(a, b, p, c, q, d, e, r, s, f, g, initial_s, initial_iA, initial_iS, time):
  """the parameter time is the time till we wish to analyse this model.
  """
  initial_e = 0
  initial_q = 0
  initial_h = 0
  initial_d = 0
  initial_r = 0

  point_list = [(initial_s, initial_e, initial_iA, initial_iS, initial_q, initial_h, initial_d, initial_r)]
  step_size = 0.1
  iterations = math.floor(time/step_size)
  for i in range(1, iterations + 1):
    if i == 100:
      a = 5*a
    if i == 250:
      a=a/5
    K_1 = -(step_size) * a * point_list[i-1][0] * (point_list[i-1][2]+point_list[i-1][3])
    L_1 = (step_size) * ( a * point_list[i-1][0] * (point_list[i-1][2]+point_list[i-1][3]) - b * (point_list[i-1][1]) )
    M_1 = (step_size) * ((b * point_list[i-1][1] * (1-p)) - c * point_list[i-1][2])
    N_1 = (step_size) * ((b * p * point_list[i-1][1]) + (1-q) * c * point_list[i-1][2] - d * point_list[i-1][3])
    O_1 = (step_size) * (d * point_list[i-1][3] - e * point_list[i-1][4])
    P_1 = (step_size) * (e * r * point_list[i-1][4] - ((1-s) * f + s * g) * point_list[i-1][5])
    Q_1 = (step_size) * (s * g * point_list[i-1][5])
    R_1 = (step_size) * (q * c * point_list[i-1][2] + (1-r) * e * point_list[i-1][4] + (1-s) * f * point_list[i-1][5])
    s_mid = point_list[i-1][0] + (K_1/2)
    e_mid = point_list[i-1][1] + (L_1/2)
    iA_mid = point_list[i-1][2] + M_1/2
    iS_mid = point_list[i-1][3] + N_1/2
    q_mid = point_list[i-1][4] + O_1/2
    h_mid = point_list[i-1][5] + P_1/2
    d_mid = point_list[i-1][6] + Q_1/2
    r_mid = point_list[i-1][7] + R_1/2
    K_2 = -(step_size) * a * s_mid * (iA_mid + iS_mid)
    L_2 = (step_size) * ((a * s_mid * (iA_mid + iS_mid) - b * e_mid))
    M_2 = (step_size) * ((b * (1-p) * e_mid) - c * iA_mid)
    N_2 = (step_size) * (b * p * e_mid + (1-q) * c * iA_mid -d * iS_mid)
    O_2 = (step_size) * (d * iS_mid - e * q_mid)
    P_2 = (step_size) * (e * r * q_mid - ((1-s)* f + s * g) * h_mid)
    Q_2 = (step_size) * (s * g * h_mid)
    R_2 = (step_size) * (q * c * iA_mid + (1-r) * e * q_mid + (1-s) * f * h_mid)
    new_s_mid = s_mid + (K_2/2)
    new_e_mid = e_mid + (L_2/2)
    new_iA_mid = iA_mid + M_2/2
    new_iS_mid = iS_mid + N_2/2
    new_q_mid = q_mid + O_2/2
    new_h_mid = h_mid + P_2/2
    new_d_mid = d_mid + Q_2/2
    new_r_mid = r_mid + R_2/2
    K_3 = -(step_size) * a * new_s_mid * (new_iA_mid + new_iS_mid)
    L_3 = (step_size) * ((a * new_s_mid * (new_iA_mid+ new_iS_mid)) - b * new_e_mid)
    M_3 = (step_size) * ((b * (1-p) * new_e_mid) - c * new_iA_mid)
    N_3 = (step_size) * (b * p * new_e_mid + (1-q) * c * new_iA_mid - d * new_iS_mid)
    O_3 = (step_size) * (d * new_iS_mid - e * new_q_mid)
    P_3  = (step_size) * (e * r * new_q_mid - ((1-s) * f + s * g) * new_h_mid)
    Q_3 = (step_size) * (s * g * new_h_mid)
    R_3 = (step_size) * (q * c * iA_mid + (1-r) * e * new_q_mid + (1-s) * f * new_h_mid)
    s_end = new_s_mid + K_3
    e_end = new_e_mid + L_3
    iA_end = new_iA_mid + M_3
    iS_end = new_iS_mid + N_3
    q_end = new_q_mid + O_3
    h_end = new_h_mid + P_3
    d_end =  new_d_mid + Q_3
    r_end = new_r_mid + R_3
    K_4 = -(step_size) * (a * s_end * (iA_end + iS_end))
    L_4 = (step_size) * ((a * s_end * (iA_end + iS_end) - b * e_end))
    M_4 = (step_size) * ((b * (1-p) * e_end) - c * iA_end)
    N_4 = (step_size) * (b * p * e_end + (1-q) * c * iA_end - d * iS_end)
    O_4 = (step_size) * (d * iS_end - e * q_end)
    P_4 = (step_size) * (e * r * q_end - ((1-s) * f + s * g) * h_end)
    Q_4 = (step_size) * (s * g * h_end)
    R_4 = (step_size) * (q * c * iA_end + (1-r) * e * q_end + (1-s) * f * h_end)
    s_new = point_list[i-1][0] + (1/6) * (K_1 + 2*K_2 + 2*K_3 + K_4)
    e_new = point_list[i-1][1] + (1/6) * (L_1 + 2*L_2 + 2*L_3 + L_4)
    iA_new = point_list[i-1][2] + (1/6) * (M_1 + 2*M_2 + 2*M_3 + M_4)
    iS_new = point_list[i-1][3] + (1/6) * (N_1 + 2*N_2 + 2*N_3 + N_4)
    q_new = point_list[i-1][4] + (1/6) * (O_1 + 2*O_2 + 2*O_3 + O_4)
    h_new = point_list[i-1][5] + (1/6) * (P_1 + 2*P_2 + 2*P_3 + P_4)
    d_new = point_list[i-1][6] + (1/6) * (Q_1 + 2*Q_2 + 2*Q_3 + Q_4)
    r_new = point_list[i-1][7] + (1/6) * (R_1 + 2*R_2 + 2*R_3 + R_4)
    point_list.append((s_new, e_new, iA_new, iS_new, q_new, h_new, d_new, r_new))

  s_values = [initial_s]
  e_values = [initial_e]  
  iA_values = [initial_iA]
  iS_values = [initial_iS]
  q_values = [initial_q]
  h_values = [initial_h]
  d_values = [initial_d]
  r_values = [initial_r]
  i_values = [initial_iA + initial_iS]
  for i in range(1, iterations + 1):
    s_values.append(point_list[i][0])
    e_values.append(point_list[i][1])
    iA_values.append(point_list[i][2])  
    iS_values.append(point_list[i][3])  
    q_values.append(point_list[i][4])
    h_values.append(point_list[i][5])  
    d_values.append(point_list[i][6]) 
    r_values.append(point_list[i][7]) 
    i_values.append(point_list[i][2]+point_list[i][3]) 
  
  susceptible = np.array(s_values)
  infected = np.array(i_values)  
  recovered = np.array(r_values)
  dead = np.array(d_values)
  hospitalized = np.array(h_values)
  time = np.array([(0.1 * i) for i in range(0, iterations + 1)])

  t_new = np.linspace(time.min(), time.max(), 500)

  rbf = Rbf(time, susceptible, function = 'thin_plate', smooth = 0.001)
  s_smooth = rbf(t_new)
  plt.plot(t_new, s_smooth)
  plt.scatter (time, susceptible);
  
  rbf = Rbf(time, infected, function = 'thin_plate', smooth = 0.001)
  s_smooth = rbf(t_new)
  plt.plot(t_new, s_smooth)
  plt.scatter (time, infected);
  
  rbf = Rbf(time, recovered, function = 'thin_plate', smooth = 0.001)
  s_smooth = rbf(t_new)
  plt.plot(t_new, s_smooth)
  plt.scatter (time, recovered);

  rbf = Rbf(time, hospitalized, function = 'thin_plate', smooth = 0.001)
  s_smooth = rbf(t_new)
  plt.plot(t_new, s_smooth)
  plt.scatter (time, hospitalized);

s_i_r_model(0.002, 0.6, 0.7, 0.5, 0.5, 0.5, 0.1, 0.6, 0.1, 0.05, 0.1, 494, 3, 3, 100 )